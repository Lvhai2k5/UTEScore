package vn.ute.utescore.controller;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import vn.ute.utescore.model.CheckinLog;
import vn.ute.utescore.model.ThanhToan;
import vn.ute.utescore.model.ThueSan;
import vn.ute.utescore.repository.CheckinLogRepository;
import vn.ute.utescore.repository.ThanhToanRepository;
import vn.ute.utescore.repository.ThueSanRepository;
import vn.ute.utescore.service.BookingService;
import vn.ute.utescore.service.ThueSanService;

@Controller
public class EmployeeController {

	private final ThueSanService thueSanService;
    private final BookingService bookingService;
    private final ThueSanRepository thueSanRepository;
    private final CheckinLogRepository checkinLogRepository;
    private final ThanhToanRepository thanhToanRepository;
    private final SimpMessagingTemplate messagingTemplate; 

    public EmployeeController(ThueSanService thueSanService,
    							BookingService bookingService,
                              ThueSanRepository thueSanRepository,
                              CheckinLogRepository checkinLogRepository,
                              ThanhToanRepository thanhToanRepository,
                              SimpMessagingTemplate messagingTemplate) {
    	this.thueSanService=thueSanService;
        this.bookingService = bookingService;
        this.thueSanRepository = thueSanRepository;
        this.checkinLogRepository = checkinLogRepository;
        this.thanhToanRepository=thanhToanRepository;
        this.messagingTemplate=messagingTemplate;
    }

    /* ---------------------- TRANG NH√ÇN VI√äN ---------------------- */

    
    
    @GetMapping({"", "/"})
    public String home() {
        return "employee/employee";
    }

    @GetMapping("/employee")
    public String employee() {
        return "employee/employee";
    }

    /* ---------------------- QU·∫¢N L√ù ƒê∆†N ƒê·∫∂T S√ÇN ---------------------- */

    @GetMapping("/employee/booking")
    public String viewBookings(Model model) {
        List<ThueSan> bookings = bookingService.findAll();
        model.addAttribute("bookings", bookings);
        model.addAttribute("selectedType", "");
        model.addAttribute("pageTitle", "UTEScore ‚Äì ƒê∆°n ƒë·∫∑t s√¢n");
        return "employee/booking";
    }

    @GetMapping("employee/booking/filter")
    public String filterBookings(@RequestParam(required = false) String type, Model model) {
        List<ThueSan> bookings;

        if (type == null || type.isEmpty()) {
            bookings = bookingService.findAll();
        } else {
            bookings = bookingService.findByLoaiThanhToan(type);
        }

        model.addAttribute("bookings", bookings);
        model.addAttribute("selectedType", type);
        model.addAttribute("pageTitle", "UTEScore ‚Äì L·ªçc ƒë∆°n ƒë·∫∑t s√¢n");
        return "employee/booking";
    }

    @GetMapping("employee/booking/search")
    public String searchBookings(@RequestParam(required = false) String keyword, Model model) {
        if (keyword == null || keyword.trim().isEmpty()) {
            model.addAttribute("bookings", bookingService.findAll());
        } else {
            model.addAttribute("bookings", bookingService.searchByKeyword(keyword.trim()));
        }
        model.addAttribute("keyword", keyword);
        return "employee/booking";
    }

    /* ========================= CH·ª®C NƒÇNG CHECK-IN ========================= */

    @GetMapping("employee/checkin/search")
    public String checkinSearch(@RequestParam(required = false) String keyword, Model model) {
        LocalDateTime from = LocalDateTime.now().minusHours(1); // m·ªëc th·ªùi gian: ch·ªâ l·∫•y ƒë∆°n ch∆∞a checkin trong t∆∞∆°ng lai g·∫ßn

        List<ThueSan> donDatSans;

        if (keyword == null || keyword.trim().isEmpty()) {
            // üü¢ Tr∆∞·ªùng h·ª£p kh√¥ng nh·∫≠p keyword ‚Üí l·∫•y to√†n b·ªô ƒë∆°n ch∆∞a checkin
            donDatSans = thueSanRepository.findNotCheckedIn(from);
        } else {
            // üü¢ C√≥ keyword ‚Üí l·ªçc theo t√™n kh√°ch ho·∫∑c m√£ ƒë∆°n + ch∆∞a checkin + th·ªùi gian
            donDatSans = thueSanService.searchFutureUncheckin(keyword);
            model.addAttribute("keyword", keyword);
        }

        model.addAttribute("donDatSans", donDatSans);
        return "employee/checkin";
    }

    // Danh s√°ch ch·ªâ nh·ªØng ƒë∆°n CH∆ØA check-in v√† c√≤n hi·ªáu l·ª±c (t·ª´ 1h tr∆∞·ªõc tr·ªü ƒëi)
    @GetMapping("employee/checkin")
    public String listBookingsForCheckin(Model model) {
        LocalDateTime from = LocalDateTime.now().minusHours(1);
        List<ThueSan> donDatSans = thueSanRepository.findNotCheckedIn(from);
        model.addAttribute("donDatSans", donDatSans);
        return "employee/checkin";
    }

    // Trang hi·ªÉn th·ªã QR cho 1 ƒë∆°n
    @GetMapping("employee/checkin/generate/{id}")
    public String generateQr(@PathVariable("id") Integer id, Model model) {
        model.addAttribute("maDonDat", id);
        return "employee/checkin_qr";
    }

 // ‚úÖ Khi kh√°ch qu√©t QR
    @GetMapping("/employee/checkin/{id}")
    public String processCheckin(@PathVariable("id") Integer id, Model model) {
        ThueSan don = thueSanRepository.findById(id).orElse(null);
        if (don == null) {
            model.addAttribute("message", "‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n ƒë·∫∑t s√¢n #" + id);
            return "employee/checkin_success";
        }

        Optional<CheckinLog> existing = checkinLogRepository.findTopByThueSan_MaDonDatOrderByMaCheckinDesc(id);

        CheckinLog log;

        if (existing.isPresent()) {
            log = existing.get();
            log.setGhiChu("1");
            log.setNgayCheckin(LocalDateTime.now());
        } else {
            log = new CheckinLog(don, LocalDateTime.now(), "1");
        }
        checkinLogRepository.save(log);
        
     // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
        List<ThanhToan> payments = thanhToanRepository.findByThueSan_MaDonDat(id);
        for (ThanhToan tt : payments) {
            if ("ƒê·∫∑t c·ªçc".equals(tt.getLoaiThanhToan())) {
                tt.setLoaiThanhToan("Ho√†n t·∫•t");
                thanhToanRepository.save(tt);
            }
        }
        // üî• G·ª≠i th√¥ng b√°o realtime t·ªõi t·∫•t c·∫£ nh√¢n vi√™n
        messagingTemplate.convertAndSend("/topic/checkin-updates", "updated");

        model.addAttribute("message", "‚úÖ Check-in th√†nh c√¥ng cho ƒë∆°n #" + id);
        return "employee/checkin_success";
    }
}
