package vn.ute.utescore.controller;

import vn.ute.utescore.dto.Guest_PitchDTO;
import vn.ute.utescore.dto.Guest_ReviewDTO;
import vn.ute.utescore.service.Guest_PitchService;
import vn.ute.utescore.service.Guest_ReviewService;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Controller
public class Guest_PitchController {

    private static final Logger logger = LoggerFactory.getLogger(Guest_PitchController.class);

    @Autowired
    private Guest_PitchService pitchService;

    @Autowired
    private Guest_ReviewService reviewService;

    /**
     * üèüÔ∏è Hi·ªÉn th·ªã danh s√°ch s√¢n b√≥ng (GET)
     */
    @GetMapping("/pitches")
    public String showPitches(Model model) {
        logger.info("‚öôÔ∏è Guest_PitchController.showPitches() ƒë∆∞·ª£c g·ªçi");

        List<Guest_PitchDTO> pitches = pitchService.getAllActive();
        List<Guest_ReviewDTO> reviews = reviewService.getSampleReviews();

        model.addAttribute("pitches", pitches);
        model.addAttribute("reviews", reviews);
        model.addAttribute("pageTitle", "‚öΩ Danh s√°ch S√¢n B√≥ng | UTEScore");

        return "guest/pitches";
    }

    /**
     * üîç L·ªçc s√¢n b√≥ng theo ƒëi·ªÅu ki·ªán (POST)
     */
    @PostMapping("/pitches")
    public String filterPitches(
            @RequestParam(required = false) String keyword,
            @RequestParam(required = false) String loaiSan,
            @RequestParam(required = false) String trangThai,
            @RequestParam(required = false) String gioBatDau,
            @RequestParam(required = false) String gioKetThuc,
            Model model) {

        logger.info("üîç ƒêang l·ªçc s√¢n b√≥ng v·ªõi: keyword='{}', loaiSan='{}', trangThai='{}', gioBatDau='{}', gioKetThuc='{}'",
                keyword, loaiSan, trangThai, gioBatDau, gioKetThuc);

        // G·ªçi service ƒë·ªÉ l·∫•y danh s√°ch s√¢n theo ƒëi·ªÅu ki·ªán
        List<Guest_PitchDTO> filteredPitches = pitchService.searchPitches(keyword, loaiSan, trangThai, gioBatDau, gioKetThuc);

        // L·∫•y review m·∫´u ƒë·ªÉ hi·ªÉn th·ªã (n·∫øu c·∫ßn)
        List<Guest_ReviewDTO> reviews = reviewService.getSampleReviews();

        // G·ª≠i l·∫°i d·ªØ li·ªáu ra view
        model.addAttribute("pitches", filteredPitches);
        model.addAttribute("reviews", reviews);

        // Gi·ªØ l·∫°i gi√° tr·ªã form l·ªçc
        model.addAttribute("keyword", keyword);
        model.addAttribute("loaiSan", loaiSan);
        model.addAttribute("trangThai", trangThai);
        model.addAttribute("gioBatDau", gioBatDau);
        model.addAttribute("gioKetThuc", gioKetThuc);
        model.addAttribute("pageTitle", "‚öΩ Danh s√°ch S√¢n B√≥ng | UTEScore");

        return "guest/pitches";
    }
}
