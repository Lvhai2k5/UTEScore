package vn.ute.utescore.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.http.HttpSession;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import vn.ute.utescore.model.*;
import vn.ute.utescore.repository.*;
import vn.ute.utescore.utils.SessionUtil;

import java.math.BigDecimal;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.*;

/**
 * üéØ Controller x·ª≠ l√Ω lu·ªìng ƒê·∫∂T S√ÇN ‚Äì X√ÅC NH·∫¨N ‚Äì THANH TO√ÅN VNPay
 * Gi·ªØ ƒë∆°n trong 10 ph√∫t, c·∫≠p nh·∫≠t tr·∫°ng th√°i sau khi thanh to√°n
 */
@Controller
@RequestMapping("/customer")
public class CustomerBookingController {

    private final CustomerSanBongRepository sanBongRepository;
    private final CustomerSystemConfigurationsRepository systemConfigRepo;
    private final CustomerGiaThueRepository giaThueRepository;
    private final CustomerKhachHangRepository khachHangRepository;
    private final CustomerThueSanRepository thueSanRepository;
    public CustomerBookingController(
            CustomerSanBongRepository sanBongRepository,
            CustomerSystemConfigurationsRepository systemConfigRepo,
            CustomerGiaThueRepository giaThueRepository,
            CustomerKhachHangRepository khachHangRepository,
            CustomerThueSanRepository thueSanRepository) {
        this.sanBongRepository = sanBongRepository;
        this.systemConfigRepo = systemConfigRepo;
        this.giaThueRepository = giaThueRepository;
        this.khachHangRepository = khachHangRepository;
        this.thueSanRepository = thueSanRepository;
    }

    
    /* ===========================================================
     * üèüÔ∏è [GET] Trang ƒë·∫∑t s√¢n
     * =========================================================== */
    @GetMapping("/booking")
    public String showBookingPage(@RequestParam(required = false) Integer pitch,
                                  Model model, HttpSession session) {
        String email = SessionUtil.getCustomerEmail(session);
        if (email == null) return "redirect:/login";

        Optional<KhachHang> khOpt = khachHangRepository.findByEmail(email);
        khOpt.ifPresent(kh -> model.addAttribute("customerPhone", kh.getSoDienThoai()));

        if (pitch == null) {
            model.addAttribute("error", "Kh√¥ng t√¨m th·∫•y s√¢n b√≥ng h·ª£p l·ªá!");
            return "customer/booking";
        }

        Optional<SanBong> optSan = sanBongRepository.findById(pitch);
        if (optSan.isEmpty()) {
            model.addAttribute("error", "Kh√¥ng t√¨m th·∫•y s√¢n b√≥ng!");
            return "customer/booking";
        }

        SanBong san = optSan.get();

        model.addAttribute("pitchId", san.getMaSan());
        model.addAttribute("pitchName", san.getTenSan());
        model.addAttribute("pitchType", san.getLoaiSan());
        model.addAttribute("pitchArea", san.getKhuVuc());
        model.addAttribute("pitchStatus", san.getTrangThai());
        model.addAttribute("pitchSize", getPitchSize(san.getLoaiSan()));
        model.addAttribute("pitchOpen", san.getGioMoCua() != null ? san.getGioMoCua().toString() : "06:00");
        model.addAttribute("pitchClose", san.getGioDongCua() != null ? san.getGioDongCua().toString() : "22:00");
        model.addAttribute("pitchImg",
                (san.getHinhAnh() != null && !san.getHinhAnh().isBlank())
                        ? san.getHinhAnh()
                        : "https://cdn-icons-png.flaticon.com/512/5341/5341961.png");

        List<GiaThue> priceList = giaThueRepository.findActiveByLoaiSan(san.getLoaiSan(), "ƒëang √°p d·ª•ng");
        DateTimeFormatter timeFmt = DateTimeFormatter.ofPattern("HH:mm");
        List<Map<String, Object>> priceData = new ArrayList<>();
        for (GiaThue g : priceList) {
            Map<String, Object> p = new HashMap<>();
            p.put("khungGioBatDau", g.getKhungGioBatDau() != null ? g.getKhungGioBatDau().format(timeFmt) : "");
            p.put("khungGioKetThuc", g.getKhungGioKetThuc() != null ? g.getKhungGioKetThuc().format(timeFmt) : "");
            p.put("giaThue", g.getGiaThue());
            priceData.add(p);
        }

        try {
            model.addAttribute("priceJson", new ObjectMapper().writeValueAsString(priceData));
        } catch (Exception e) {
            model.addAttribute("priceJson", "[]");
        }

        double depositRate = getDepositRate();
        model.addAttribute("depositRate", depositRate);
        model.addAttribute("depositPercentText", String.format("%.0f%%", depositRate * 100));
        model.addAttribute("pageTitle", "ƒê·∫∑t s√¢n | UTEScore");
        return "customer/booking";
    }

    /* ===========================================================
     * üì© [POST] Khi b·∫•m ‚Äúƒê·∫∑t s√¢n ngay‚Äù t·ª´ danh s√°ch s√¢n
     * =========================================================== */
    @PostMapping("/booking")
    public String redirectToBooking(@RequestParam("pitchId") Integer pitchId,
                                    HttpSession session) {
        if (SessionUtil.getCustomerEmail(session) == null)
            return "redirect:/login";
        return "redirect:/customer/booking?pitch=" + pitchId;
    }

    /* ===========================================================
     * ‚è∞ [GET] API: L·∫•y danh s√°ch khung gi·ªù ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t c·ªßa s√¢n
     * =========================================================== */
    @GetMapping("/booked-slots")
    @ResponseBody
    public List<String> getBookedSlots(@RequestParam("pitchId") Integer pitchId,
                                       @RequestParam("date") String dateStr) {
        try {
            LocalDate date = LocalDate.parse(dateStr);
            LocalDateTime startOfDay = date.atStartOfDay();
            LocalDateTime endOfDay = date.atTime(LocalTime.MAX);
            List<ThueSan> bookings = thueSanRepository.findBySanBong_MaSanAndNgayThueBetween(pitchId, startOfDay, endOfDay);

            List<String> result = new ArrayList<>();
            LocalDateTime now = LocalDateTime.now();
            for (ThueSan t : bookings) {
                LocalDateTime endTime = t.getNgayThue().with(t.getKhungGioKetThuc());
                if (endTime.isBefore(now)) continue;

                boolean isPending = t.getGhiChu() != null && t.getGhiChu().contains("Ch·ªù thanh to√°n VNPay")
                        && t.getHanGiuCho() != null && t.getHanGiuCho().isAfter(now);

                boolean isConfirmed = t.getThanhToans() != null && t.getThanhToans().stream().anyMatch(
                	    tt -> {
                	        String loai = tt.getLoaiThanhToan();
                	        String status = tt.getTrangThaiThanhToan();

                	        // üü¢ Ki·ªÉm tra xem ƒë√¢y l√† giao d·ªãch ƒë·∫∑t c·ªçc th√†nh c√¥ng
                	        boolean isDeposit = loai != null && loai.equalsIgnoreCase("ƒê·∫∑t c·ªçc")
                	                && status != null && status.equalsIgnoreCase("Th√†nh c√¥ng");

                	        // üî¥ Ki·ªÉm tra xem ƒë∆°n n√†y c√≥ giao d·ªãch ho√†n ti·ªÅn kh√¥ng
                	        boolean hasRefund = t.getThanhToans().stream().anyMatch(
                	                r -> {
                	                    String loaiR = r.getLoaiThanhToan();
                	                    String statusR = r.getTrangThaiThanhToan();
                	                    return loaiR != null && loaiR.equalsIgnoreCase("Ho√†n ti·ªÅn")
                	                            && (statusR != null && (statusR.equalsIgnoreCase("Ch·ªù duy·ªát")
                	                            || statusR.equalsIgnoreCase("Th√†nh c√¥ng")));
                	                });

                	        // üëâ N·∫øu l√† ƒë·∫∑t c·ªçc th√†nh c√¥ng v√† ch∆∞a ho√†n ti·ªÅn => gi·ªØ ch·ªó
                	        return isDeposit && !hasRefund;
                	    });

                if (isPending || isConfirmed) {
                    result.add(t.getKhungGioBatDau() + "-" + t.getKhungGioKetThuc());
                }
            }
            return result;
        } catch (Exception e) {
            e.printStackTrace();
            return Collections.emptyList();
        }
    }

    /* ===========================================================
     * üí≥ [POST] X√°c nh·∫≠n ƒë·∫∑t s√¢n & l∆∞u DB tr∆∞·ªõc khi thanh to√°n
     * =========================================================== */
    @PostMapping("/booking/confirm")
    public String confirmBooking(@RequestParam("pitchId") Integer pitchId,
                                 @RequestParam("amount") long cocAmount,
                                 @RequestParam("date") String date,
                                 @RequestParam("start") String start,
                                 @RequestParam("end") String end,
                                 @RequestParam("total") Long total,
                                 HttpSession session,
                                 Model model) {

        // üîê Ki·ªÉm tra ƒëƒÉng nh·∫≠p
        String email = SessionUtil.getCustomerEmail(session);
        if (email == null) return "redirect:/login";

        Optional<KhachHang> khOpt = khachHangRepository.findByEmail(email);
        Optional<SanBong> sanOpt = sanBongRepository.findById(pitchId);
        if (khOpt.isEmpty() || sanOpt.isEmpty()) return "redirect:/customer/home";

        KhachHang kh = khOpt.get();
        SanBong san = sanOpt.get();

        // üïí Parse th·ªùi gian
        LocalDate ngayThue = LocalDate.parse(date);
        LocalTime gioBatDau = LocalTime.parse(start);
        LocalTime gioKetThuc = LocalTime.parse(end);

        /* ===========================================================
         * üö´ 1Ô∏è‚É£ Ki·ªÉm tra kh√°ch h√†ng c√≥ ƒë∆°n ƒëang gi·ªØ ch·ªó ch∆∞a thanh to√°n
         * =========================================================== */
        List<ThueSan> existing = thueSanRepository.findByKhachHang(kh);
        boolean hasActiveHold = existing.stream().anyMatch(t -> {
            if (t.getGhiChu() == null || !t.getGhiChu().contains("Ch·ªù thanh to√°n VNPay"))
                return false;
            LocalDateTime hanGiuCho = t.getHanGiuCho();
            return hanGiuCho != null && LocalDateTime.now().isBefore(hanGiuCho);
        });

        if (hasActiveHold) {
            model.addAttribute("errorMessage",
                "‚ö†Ô∏è B·∫°n ƒëang c√≥ m·ªôt ƒë∆°n ƒëang ch·ªù thanh to√°n c·ªçc VNPay trong th·ªùi gian gi·ªØ ch·ªó. " +
                "Vui l√≤ng ho√†n t·∫•t thanh to√°n ho·∫∑c ƒë·ª£i h·∫øt 10 ph√∫t ƒë·ªÉ ƒë·∫∑t s√¢n m·ªõi.");
            model.addAttribute("showAlert", true);
            return showBookingPage(pitchId, model, session);
        }

        /* ===========================================================
         * üö´ 2Ô∏è‚É£ Ki·ªÉm tra tr√πng khung gi·ªù ƒë·∫∑t s√¢n
         * =========================================================== */
        // üëâ G·ªçi query chu·∫©n (LocalDate + String HH:mm:ss)
        List<ThueSan> overlapBookings = thueSanRepository.findOverlappingBookings(
                pitchId,
                ngayThue,
                start + ":00", // v√≠ d·ª• "08:00:00"
                end + ":00"    // v√≠ d·ª• "09:00:00"
        );


        // ‚ùó N·∫øu c√≥ √≠t nh·∫•t 1 ƒë∆°n c√≤n hi·ªáu l·ª±c (thanh to√°n th√†nh c√¥ng ho·∫∑c ƒëang gi·ªØ ch·ªó)
        boolean isOverlapping = overlapBookings.stream().anyMatch(t -> {
            LocalDateTime now = LocalDateTime.now();

            // üîπ C√≥ giao d·ªãch thanh to√°n th√†nh c√¥ng (ƒë·ªß ti·ªÅn / ho√†n t·∫•t)
            boolean isPaid = t.getThanhToans() != null && t.getThanhToans().stream()
                .anyMatch(tt -> {
                    String loai = tt.getLoaiThanhToan() != null ? tt.getLoaiThanhToan().trim() : "";
                    String status = tt.getTrangThaiThanhToan() != null ? tt.getTrangThaiThanhToan().trim() : "";
                    return !loai.equalsIgnoreCase("Ho√†n ti·ªÅn")
                            && (status.equalsIgnoreCase("ƒê√£ thanh to√°n") || status.equalsIgnoreCase("Th√†nh c√¥ng"));
                });

            // üîπ Ki·ªÉm tra c√≥ ho√†n ti·ªÅn n√†o kh√¥ng
            boolean hasRefund = t.getThanhToans() != null && t.getThanhToans().stream()
                .anyMatch(r -> {
                    String loaiR = r.getLoaiThanhToan() != null ? r.getLoaiThanhToan().trim() : "";
                    String statusR = r.getTrangThaiThanhToan() != null ? r.getTrangThaiThanhToan().trim() : "";
                    return loaiR.equalsIgnoreCase("Ho√†n ti·ªÅn")
                            && (statusR.equalsIgnoreCase("Ch·ªù duy·ªát") || statusR.equalsIgnoreCase("Th√†nh c√¥ng"));
                });

            // üîπ ƒê∆°n gi·ªØ ch·ªó VNPay (ch∆∞a thanh to√°n)
            boolean isHolding = t.getGhiChu() != null && t.getGhiChu().contains("Ch·ªù thanh to√°n VNPay")
                    && t.getHanGiuCho() != null && t.getHanGiuCho().isAfter(now);

            // üîπ ƒê∆°n ƒë·∫∑t c·ªçc th√†nh c√¥ng m√† ch∆∞a ho√†n
            boolean hasDepositWithoutRefund = t.getThanhToans() != null && t.getThanhToans().stream()
                .anyMatch(tt -> {
                    String loai = tt.getLoaiThanhToan() != null ? tt.getLoaiThanhToan().trim() : "";
                    String status = tt.getTrangThaiThanhToan() != null ? tt.getTrangThaiThanhToan().trim() : "";
                    return loai.equalsIgnoreCase("ƒê·∫∑t c·ªçc") && status.equalsIgnoreCase("Th√†nh c√¥ng") && !hasRefund;
                });

            // üß† N·∫øu Paid nh∆∞ng ƒë√£ ho√†n th√¨ kh√¥ng t√≠nh l√† tr√πng
            boolean isReallyPaid = isPaid && !hasRefund;

            System.out.println("üéØ Booking #" + t.getMaDonDat()
                    + " | Paid=" + isPaid
                    + " | Holding=" + isHolding
                    + " | DepositNoRefund=" + hasDepositWithoutRefund
                    + " | HasRefund=" + hasRefund);

            return isReallyPaid || isHolding || hasDepositWithoutRefund;
        });


        

        if (isOverlapping) {
            model.addAttribute("errorMessage", "‚ö†Ô∏è Khung gi·ªù n√†y ƒë√£ c√≥ ng∆∞·ªùi ƒë·∫∑t tr∆∞·ªõc. Vui l√≤ng ch·ªçn th·ªùi gian kh√°c!");
            model.addAttribute("showAlert", true);
            return showBookingPage(pitchId, model, session);
        }

        /* ===========================================================
         * üíæ 3Ô∏è‚É£ L∆∞u ƒë∆°n ƒë·∫∑t s√¢n m·ªõi v√† chuy·ªÉn ƒë·∫øn VNPay
         * =========================================================== */
        try {
            ThueSan thueSan = new ThueSan();
            thueSan.setKhachHang(kh);
            thueSan.setSanBong(san);
            thueSan.setNgayTao(LocalDateTime.now());
            thueSan.setNgayThue(ngayThue.atStartOfDay());
            thueSan.setKhungGioBatDau(gioBatDau);
            thueSan.setKhungGioKetThuc(gioKetThuc);
            thueSan.setTongTien(BigDecimal.valueOf(total));
            thueSan.setTienCocBatBuoc(BigDecimal.valueOf(cocAmount));
            thueSan.setHanGiuCho(LocalDateTime.now().plusMinutes(10));
            thueSan.setGhiChu("Ch·ªù thanh to√°n VNPay");
            thueSanRepository.save(thueSan);

            String orderInfo = kh.getSoDienThoai() + "_" + thueSan.getMaDonDat() + "_" + System.currentTimeMillis();
            return "redirect:/api/vnpay/create-payment?amount=" + cocAmount + "&orderInfo=" + orderInfo;

        } catch (Exception e) {
            e.printStackTrace();
            model.addAttribute("errorMessage", "‚ùå L·ªói h·ªá th·ªëng khi l∆∞u ƒë∆°n ƒë·∫∑t s√¢n. Vui l√≤ng th·ª≠ l·∫°i.");
            model.addAttribute("showAlert", true);
            return showBookingPage(pitchId, model, session);
        }
    }

    /* ===========================================================
     * üí≥ [GET] Thanh to√°n c·ªçc l·∫°i qua VNPay cho ƒë∆°n ch∆∞a thanh to√°n
     * =========================================================== */
    @GetMapping("/payment/deposit")
    public String payDeposit(@RequestParam("maDonDat") Integer maDonDat, HttpSession session) {
        String email = SessionUtil.getCustomerEmail(session);
        if (email == null) return "redirect:/login";

        Optional<ThueSan> opt = thueSanRepository.findById(maDonDat);
        if (opt.isEmpty()) return "redirect:/customer/history";

        ThueSan ts = opt.get();
        ts.setGhiChu("Ch·ªù thanh to√°n VNPay");
        ts.setHanGiuCho(LocalDateTime.now().plusMinutes(10));
        thueSanRepository.save(ts);

        String orderInfo = ts.getKhachHang().getSoDienThoai() + "_" + ts.getMaDonDat();
        long amount = ts.getTienCocBatBuoc() != null ? ts.getTienCocBatBuoc().longValue() : 0;
        return "redirect:/api/vnpay/create-payment?amount=" + amount + "&orderInfo=" + orderInfo;
    }
    /* ===========================================================
     * ‚ùå [GET] H·ªßy ƒë∆°n ch∆∞a thanh to√°n
     * =========================================================== */
    @GetMapping("/cancel-booking")
    public String cancelBooking(@RequestParam("maDonDat") Integer maDonDat,
                                HttpSession session) {
        String email = SessionUtil.getCustomerEmail(session);
        if (email == null) return "redirect:/login";

        Optional<ThueSan> opt = thueSanRepository.findById(maDonDat);
        if (opt.isPresent()) {
            ThueSan ts = opt.get();

            // ‚ùó Ch·ªâ cho ph√©p h·ªßy khi ch∆∞a thanh to√°n
            boolean daThanhToan = ts.getThanhToans() != null && ts.getThanhToans().stream()
                    .anyMatch(t -> t.getTrangThaiThanhToan() != null &&
                            (t.getTrangThaiThanhToan().equalsIgnoreCase("ƒê√£ thanh to√°n") ||
                             t.getTrangThaiThanhToan().equalsIgnoreCase("Th√†nh c√¥ng")));

            if (!daThanhToan) {
                ts.setGhiChu("Kh√°ch h√†ng ƒë√£ h·ªßy ƒë∆°n v√†o " + LocalDateTime.now().format(
                        DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm")));
                ts.setHanGiuCho(null);
                thueSanRepository.save(ts);
            }
        }

        return "redirect:/customer/history";
    }


    /* ===========================================================
     * ‚öôÔ∏è L·∫•y t·ª∑ l·ªá c·ªçc t·ª´ SystemConfigurations
     * =========================================================== */
    private double getDepositRate() {
        try {
            String val = systemConfigRepo.findValueByKey("deposit_rate");
            if (val != null && !val.isBlank()) {
                double parsed = Double.parseDouble(val.trim());
                return parsed > 1 ? parsed / 100 : parsed;
            }
        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc t·ª∑ l·ªá c·ªçc: " + e.getMessage());
        }
        return 0.3;
    }

    private String getPitchSize(String loaiSan) {
        if (loaiSan == null) return "";
        return switch (loaiSan.trim().toLowerCase()) {
            case "S√¢n 5" -> "20 √ó 40 m";
            case "S√¢n 7" -> "30 √ó 50 m";
            case "S√¢n 11" -> "105 √ó 68 m";
            default -> "";
        };
    }
}
