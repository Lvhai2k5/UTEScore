package vn.ute.utescore.controller;

import jakarta.servlet.http.HttpSession;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import vn.ute.utescore.dto.CustomerChatRequest;
import vn.ute.utescore.dto.CustomerChatResponse;
import vn.ute.utescore.service.CustomerGeminiChatService;
import vn.ute.utescore.service.CustomerChatQueryProcessor;
import vn.ute.utescore.utils.CustomerChatPolicy;

@RestController
@RequestMapping("/customer/chat")
public class CustomerChatController {

    private final CustomerGeminiChatService geminiService;
    private final CustomerChatQueryProcessor queryProcessor;

    // ‚úÖ Constructor kh√¥ng d√πng Lombok
    public CustomerChatController(CustomerGeminiChatService geminiService,
                                  CustomerChatQueryProcessor queryProcessor) {
        this.geminiService = geminiService;
        this.queryProcessor = queryProcessor;
    }

    // ‚úÖ X·ª≠ l√Ω POST request t·ª´ client chatbot
    @PostMapping
    public ResponseEntity<CustomerChatResponse> chat(
            @RequestBody CustomerChatRequest chatRequest,
            HttpSession session) {

        // ‚öôÔ∏è L·∫•y n·ªôi dung ng∆∞·ªùi d√πng nh·∫≠p
        String message = chatRequest.getMessage();

        // üîí 1. Ki·ªÉm tra n·ªôi dung nh·∫°y c·∫£m
        if (CustomerChatPolicy.isSensitive(message)) {
            return ResponseEntity.ok(
                    new CustomerChatResponse("‚ö†Ô∏è Xin l·ªói, t√¥i kh√¥ng th·ªÉ cung c·∫•p th√¥ng tin c√° nh√¢n ho·∫∑c nh·∫°y c·∫£m.")
            );
        }

        // üß† 2. X·ª≠ l√Ω c√¢u h·ªèi li√™n quan ƒë·∫øn CSDL
        String dbAnswer = queryProcessor.handleQuery(message, session);
        if (dbAnswer != null) {
            return ResponseEntity.ok(new CustomerChatResponse(dbAnswer));
        }

        // ü§ñ 3. G·ªçi Gemini ƒë·ªÉ tr·∫£ l·ªùi t·ª± nhi√™n
        String context = """
                B·∫°n l√† chatbot h·ªó tr·ª£ kh√°ch thu√™ s√¢n b√≥ng UTEScore.
                Tr·∫£ l·ªùi th√¢n thi·ªán, ng·∫Øn g·ªçn v√† kh√¥ng ti·∫øt l·ªô d·ªØ li·ªáu c√° nh√¢n.
                """;

        String answer = geminiService.askGemini(context + "\n\nC√¢u h·ªèi: " + message);
        return ResponseEntity.ok(new CustomerChatResponse(answer));
    }
}
