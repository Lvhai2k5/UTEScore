package vn.ute.utescore.controller;

import jakarta.servlet.http.HttpSession;
import lombok.RequiredArgsConstructor;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import vn.ute.utescore.model.KhachHang;
import vn.ute.utescore.model.TaiKhoan;
import vn.ute.utescore.repository.CustomerKhachHangRepository;
import vn.ute.utescore.repository.CustomerTaiKhoanRepository;
import vn.ute.utescore.utils.SessionUtil;

import java.io.IOException;
import java.util.Base64;

@Controller
@RequestMapping("/customer")
public class CustomerController {

	private final CustomerKhachHangRepository khachHangRepository;
    private final CustomerTaiKhoanRepository taiKhoanRepository;
    private final BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

    public CustomerController(CustomerKhachHangRepository khachHangRepository,
                              CustomerTaiKhoanRepository taiKhoanRepository) {
        this.khachHangRepository = khachHangRepository;
        this.taiKhoanRepository = taiKhoanRepository;
    }

    // üè† Trang ch·ªß kh√°ch h√†ng
    @GetMapping("/home")
    public String home(Model model, HttpSession session) {
        String email = SessionUtil.getCustomerEmail(session);
        if (email == null) return "redirect:/login";

        KhachHang kh = khachHangRepository.findByEmail(email).orElse(null);
        if (kh == null) return "redirect:/login";
        if (kh.getAnhDaiDien() != null) {
            model.addAttribute("anhBase64",
                    Base64.getEncoder().encodeToString(kh.getAnhDaiDien()));
        }
        model.addAttribute("khachHang", kh);
        model.addAttribute("pageTitle", "Trang ch·ªß kh√°ch h√†ng");
        return "customer/home";
    }
    @GetMapping("/logout")
    public String logout(HttpSession session) {
        session.invalidate();
        return "guest/index"; // v·ªÅ trang index kh√°ch
    }
    // üë§ Trang t√†i kho·∫£n c√° nh√¢n
    @GetMapping("/account")
    public String account(Model model, HttpSession session) {
        String email = SessionUtil.getCustomerEmail(session);
        if (email == null) return "redirect:/login";

        KhachHang kh = khachHangRepository.findByEmail(email).orElse(null);
        if (kh == null) return "redirect:/login";

        if (kh.getAnhDaiDien() != null) {
            model.addAttribute("anhBase64",
                    Base64.getEncoder().encodeToString(kh.getAnhDaiDien()));
        }

        model.addAttribute("khachHang", kh);
        model.addAttribute("pageTitle", "T√†i kho·∫£n c√° nh√¢n");
        return "customer/account";
    }

    // üíæ C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n
    @PostMapping("/account/update")
    public String updateAccount(@RequestParam("HoTen") String hoTen,
                                @RequestParam("SoDienThoai") String soDienThoai,
                                @RequestParam(value = "anhDaiDienFile", required = false) MultipartFile file,
                                HttpSession session, Model model) {

        String email = SessionUtil.getCustomerEmail(session);
        if (email == null) return "redirect:/login";

        KhachHang kh = khachHangRepository.findByEmail(email).orElse(null);
        if (kh == null) return "redirect:/login";

        // üß† Regex ki·ªÉm tra h·ªç t√™n ti·∫øng Vi·ªát: ch·ªâ cho ph√©p ch·ªØ, d·∫•u, kho·∫£ng tr·∫Øng
        String hoTenPattern = "^[A-Za-z√Ä-·ª∏√†-·ªπƒÇƒÉ√Ç√¢√ä√™√î√¥∆†∆°∆Ø∆∞ƒêƒë\\s]{2,50}$";

        // üß© Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
        if (hoTen == null || hoTen.trim().isEmpty()) {
            model.addAttribute("errorMessage", "‚ö†Ô∏è H·ªç t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
        } else if (!hoTen.trim().matches(hoTenPattern)) {
            model.addAttribute("errorMessage", "‚ö†Ô∏è H·ªç t√™n kh√¥ng h·ª£p l·ªá! (Ch·ªâ ch·ª©a ch·ªØ c√°i, c√≥ th·ªÉ c√≥ d·∫•u v√† kho·∫£ng tr·∫Øng)");
        } else if (soDienThoai == null || soDienThoai.trim().isEmpty()) {
            model.addAttribute("errorMessage", "‚ö†Ô∏è S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
        } else if (!soDienThoai.matches("^0\\d{9,10}$")) {
            model.addAttribute("errorMessage", "‚ö†Ô∏è S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá! (Ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng 0 v√† c√≥ 10‚Äì11 s·ªë)");
        } else {
            try {
                kh.setHoTen(hoTen.trim());
                kh.setSoDienThoai(soDienThoai.trim());

                // üñºÔ∏è Ki·ªÉm tra file ·∫£nh (n·∫øu c√≥)
                if (file != null && !file.isEmpty()) {
                    String contentType = file.getContentType();
                    if (contentType == null || 
                        !(contentType.equals("image/jpeg") || contentType.equals("image/png"))) {
                        model.addAttribute("errorMessage", "‚ö†Ô∏è ·∫¢nh ƒë·∫°i di·ªán ch·ªâ ch·∫•p nh·∫≠n ƒë·ªãnh d·∫°ng JPG ho·∫∑c PNG!");
                    } else {
                        kh.setAnhDaiDien(file.getBytes());
                        model.addAttribute("successMessage", "‚úÖ C·∫≠p nh·∫≠t th√¥ng tin v√† ·∫£nh ƒë·∫°i di·ªán th√†nh c√¥ng!");
                    }
                } else {
                    model.addAttribute("successMessage", "‚úÖ C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");
                }

                khachHangRepository.save(kh);

            } catch (IOException e) {
                model.addAttribute("errorMessage", "‚ö†Ô∏è L·ªói khi t·∫£i ·∫£nh: " + e.getMessage());
            }
        }

        // üì∏ G·ª≠i l·∫°i ·∫£nh ƒë·ªÉ hi·ªÉn th·ªã
        if (kh.getAnhDaiDien() != null) {
            model.addAttribute("anhBase64",
                    Base64.getEncoder().encodeToString(kh.getAnhDaiDien()));
        }

        model.addAttribute("khachHang", kh);
        model.addAttribute("pageTitle", "T√†i kho·∫£n c√° nh√¢n");
        return "customer/account";
    }

    // üîí ƒê·ªïi m·∫≠t kh·∫©u
    @PostMapping("/account/change-password")
    public String changePassword(@RequestParam("oldPassword") String oldPassword,
                                 @RequestParam("newPassword") String newPassword,
                                 @RequestParam("confirmPassword") String confirmPassword,
                                 HttpSession session, Model model) {

        String email = SessionUtil.getCustomerEmail(session);
        if (email == null) return "redirect:/login";

        TaiKhoan tk = taiKhoanRepository.findById(email).orElse(null);
        if (tk == null) {
            model.addAttribute("errorMessage", "‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n!");
        } else if (!passwordEncoder.matches(oldPassword, tk.getMatKhau())) {
            model.addAttribute("errorMessage", "‚ùå M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c!");
        } else if (!newPassword.equals(confirmPassword)) {
            model.addAttribute("errorMessage", "‚ö†Ô∏è M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n kh√¥ng tr√πng kh·ªõp!");
        } else {
            tk.setMatKhau(passwordEncoder.encode(newPassword));
            taiKhoanRepository.save(tk);
            model.addAttribute("successMessage", "üîë ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!");
        }

        KhachHang kh = khachHangRepository.findByEmail(email).orElse(null);
        if (kh != null && kh.getAnhDaiDien() != null)
            model.addAttribute("anhBase64",
                    Base64.getEncoder().encodeToString(kh.getAnhDaiDien()));

        model.addAttribute("khachHang", kh);
        model.addAttribute("pageTitle", "T√†i kho·∫£n c√° nh√¢n");
        return "customer/account";
    }
}
