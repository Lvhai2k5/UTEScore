package vn.ute.utescore.service.impl;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import jakarta.servlet.http.HttpSession;
import org.springframework.stereotype.Service;
import vn.ute.utescore.model.GiaThue;
import vn.ute.utescore.model.KhachHang;
import vn.ute.utescore.model.SanBong;
import vn.ute.utescore.model.ThueSan;
import vn.ute.utescore.repository.CustomerGiaThueRepository;
import vn.ute.utescore.repository.CustomerSanBongRepository;
import vn.ute.utescore.repository.CustomerThueSanRepository;
import vn.ute.utescore.service.CustomerChatQueryProcessor;
import vn.ute.utescore.service.CustomerGeminiChatService;
import vn.ute.utescore.utils.SessionUtil;

import java.text.NumberFormat;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Locale;

/**
 * Chatbot x·ª≠ l√Ω c√¢u h·ªèi c·ªßa kh√°ch h√†ng:
 * - N·∫øu l√† c√¢u h·ªèi quen thu·ªôc ‚Üí tr·∫£ l·ªùi b·∫±ng d·ªØ li·ªáu h·ªá th·ªëng
 * - N·∫øu kh√¥ng ‚Üí g·ªçi Gemini AI ƒë·ªÉ ph·∫£n h·ªìi t·ª± nhi√™n b·∫±ng ti·∫øng Vi·ªát c√≥ d·∫•u
 */
@Service
public class CustomerChatQueryProcessorImpl implements CustomerChatQueryProcessor {

    private final CustomerThueSanRepository thueSanRepo;
    private final CustomerSanBongRepository sanRepo;
    private final CustomerGiaThueRepository giaRepo;
    private final CustomerGeminiChatService geminiChatService;

    public CustomerChatQueryProcessorImpl(CustomerThueSanRepository thueSanRepo,
                                          CustomerSanBongRepository sanRepo,
                                          CustomerGiaThueRepository giaRepo,
                                          CustomerGeminiChatService geminiChatService) {
        this.thueSanRepo = thueSanRepo;
        this.sanRepo = sanRepo;
        this.giaRepo = giaRepo;
        this.geminiChatService = geminiChatService;
    }

    @Override
    public String handleQuery(String msg, HttpSession session) {
        if (msg == null || msg.isBlank()) {
            return "‚ùì B·∫°n vui l√≤ng nh·∫≠p c√¢u h·ªèi c·ª• th·ªÉ h∆°n ƒë·ªÉ m√¨nh h·ªó tr·ª£ t·ªët h∆°n nh√©!";
        }

        String m = msg.toLowerCase(Locale.ROOT).trim();
        NumberFormat nf = NumberFormat.getInstance(Locale.forLanguageTag("vi-VN"));
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");

        // üëã Nh·∫≠n di·ªán l·ªùi ch√†o
        if (m.contains("ch√†o") || m.contains("hello") || m.contains("hi ") ||
            m.contains("hey") || m.contains("helo") || m.contains("bot ∆°i")) {
            return """
                    Xin ch√†o üëã! T√¥i l√† tr·ª£ l√Ω ·∫£o **UTEScore** ü§ñ
                    B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ üí¨ *gi√° thu√™ s√¢n*, *s√¢n tr·ªëng*, ho·∫∑c *l·ªãch s·ª≠ ƒë·∫∑t s√¢n* nh√©!
                    """;
        }

        // üè∑Ô∏è 1Ô∏è‚É£ H·ªèi gi√° thu√™ s√¢n
        if (m.matches(".*(gi√°|bao nhi√™u|thu√™ s√¢n|m·ª©c ph√≠|bao nhieu|s√¢n [0-9]+).*")) {
            List<GiaThue> dsGiaThue = giaRepo.findAll();
            if (dsGiaThue == null || dsGiaThue.isEmpty()) {
                return "Hi·ªán t·∫°i m√¨nh ch∆∞a c√≥ th√¥ng tin v·ªÅ b·∫£ng gi√° thu√™ s√¢n. B·∫°n vui l√≤ng quay l·∫°i sau nh√©! ‚öΩ";
            }

            String loaiSan = null;
            if (m.contains("5")) loaiSan = "5";
            else if (m.contains("7")) loaiSan = "7";
            else if (m.contains("11")) loaiSan = "11";

            final String loaiSanFinal = loaiSan; // ‚úÖ fix: effectively final

            if (loaiSanFinal != null) {
                List<GiaThue> dsLoc = dsGiaThue.stream()
                        .filter(g -> g.getLoaiSan() != null && g.getLoaiSan().contains(loaiSanFinal))
                        .toList();

                if (dsLoc.isEmpty()) {
                    return "‚ö†Ô∏è Hi·ªán ch∆∞a c√≥ th√¥ng tin gi√° thu√™ cho s√¢n " + loaiSanFinal + " ng∆∞·ªùi trong h·ªá th·ªëng.";
                }

                StringBuilder sb = new StringBuilder("üìã Gi√° thu√™ **s√¢n " + loaiSanFinal + " ng∆∞·ªùi** hi·ªán t·∫°i:\n\n");
                for (GiaThue g : dsLoc) {
                    sb.append(String.format(
                            "‚Ä¢ %s - %s: %s ƒë/gi·ªù (%s)\n",
                            g.getKhungGioBatDau(),
                            g.getKhungGioKetThuc(),
                            nf.format(g.getGiaThue()),
                            g.getTrangThai() != null ? g.getTrangThai().toLowerCase() : "kh√¥ng r√µ tr·∫°ng th√°i"
                    ));
                }
                sb.append("\nüí° B·∫°n mu·ªën m√¨nh gi√∫p tra s√¢n tr·ªëng cho lo·∫°i s√¢n " + loaiSanFinal + " ng∆∞·ªùi kh√¥ng?");
                return sb.toString().trim();
            }

            // N·∫øu h·ªèi chung chung
            StringBuilder sb = new StringBuilder("üìã ƒê√¢y l√† b·∫£ng gi√° thu√™ s√¢n hi·ªán t·∫°i c·ªßa UTEScore:\n\n");
            for (GiaThue g : dsGiaThue) {
                sb.append(String.format(
                        "‚Ä¢ S√¢n %s: %s - %s ‚Üí %s ƒë/gi·ªù (%s)\n",
                        g.getLoaiSan(),
                        g.getKhungGioBatDau(),
                        g.getKhungGioKetThuc(),
                        nf.format(g.getGiaThue()),
                        g.getTrangThai() != null ? g.getTrangThai().toLowerCase() : "kh√¥ng r√µ tr·∫°ng th√°i"
                ));
            }
            sb.append("\nüí° B·∫°n c√≥ th·ªÉ h·ªèi v√≠ d·ª•: *‚ÄúS√¢n 7 ng∆∞·ªùi gi√° bao nhi√™u?‚Äù* ho·∫∑c *‚ÄúS√¢n 11 ng∆∞·ªùi bu·ªïi t·ªëi gi√° th·∫ø n√†o?‚Äù*");
            return sb.toString().trim();
        }

        // ‚öΩ 2Ô∏è‚É£ H·ªèi s√¢n tr·ªëng / g·ª£i √Ω s√¢n theo khu v·ª±c
        if (m.contains("thu√™ s√¢n") || m.contains("t√¨m s√¢n") || m.contains("s√¢n khu") ||
            m.contains("khu a") || m.contains("khu b") || m.contains("khu c") || m.contains("khu d")) {

            String loaiSan = null;
            if (m.contains("5")) loaiSan = "5";
            else if (m.contains("7")) loaiSan = "7";
            else if (m.contains("11")) loaiSan = "11";

            String khuVuc = null;
            if (m.contains("khu a")) khuVuc = "A";
            else if (m.contains("khu b")) khuVuc = "B";
            else if (m.contains("khu c")) khuVuc = "C";
            else if (m.contains("khu d")) khuVuc = "D";

            final String loaiSanFinal = loaiSan; // ‚úÖ fix: effectively final
            final String khuVucFinal = khuVuc;   // ‚úÖ fix: effectively final

            List<SanBong> dsSanBong = sanRepo.findAll();
            List<SanBong> dsLoc = dsSanBong.stream()
                    .filter(s -> (loaiSanFinal == null || s.getLoaiSan().contains(loaiSanFinal)) &&
                                 (khuVucFinal == null || (s.getKhuVuc() != null && s.getKhuVuc().equalsIgnoreCase(khuVucFinal))))
                    .toList();

            if (dsLoc.isEmpty()) {
                return "üò• R·∫•t ti·∫øc, hi·ªán UTEScore ch∆∞a t√¨m th·∫•y s√¢n ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n.";
            }

            StringBuilder sb = new StringBuilder("‚öΩ D∆∞·ªõi ƒë√¢y l√† c√°c s√¢n ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n:\n\n");
            for (SanBong s : dsLoc) {
                sb.append(String.format(
                        "‚Ä¢ %s (%s ng∆∞·ªùi, khu %s)\n  üïí %s - %s\n  üìç %s\n  üåê %s\n\n",
                        s.getTenSan(),
                        s.getLoaiSan(),
                        s.getKhuVuc(),
                        s.getGioMoCua() != null ? s.getGioMoCua() : "Ch∆∞a r√µ",
                        s.getGioDongCua() != null ? s.getGioDongCua() : "Ch∆∞a r√µ",
                        s.getMoTa() != null ? s.getMoTa() : "Kh√¥ng c√≥ m√¥ t·∫£",
                        s.getDuongDanGGMap() != null ? s.getDuongDanGGMap() : "Kh√¥ng c√≥ link Google Map"
                ));
            }
            sb.append("üí¨ B·∫°n c√≥ mu·ªën m√¨nh gi√∫p ƒë·∫∑t s√¢n trong khu n√†y kh√¥ng?");
            return sb.toString().trim();
        }

        // üïì 3Ô∏è‚É£ L·ªãch s·ª≠ ƒë·∫∑t s√¢n
        if (m.contains("t√¥i ƒë√£ ƒë·∫∑t") || m.contains("l·ªãch s·ª≠") ||
            m.contains("ƒë∆°n c·ªßa t√¥i") || m.contains("s√¢n t√¥i ƒë·∫∑t")) {
            KhachHang kh = SessionUtil.getKhachHang(session);
            if (kh == null) {
                return "‚ö†Ô∏è B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem l·ªãch s·ª≠ ƒë·∫∑t s√¢n c·ªßa m√¨nh nha!";
            }

            List<ThueSan> dsThueSan = thueSanRepo.findByKhachHang(kh);
            if (dsThueSan == null || dsThueSan.isEmpty()) {
                return "üì≠ C√≥ v·∫ª b·∫°n ch∆∞a c√≥ ƒë∆°n ƒë·∫∑t s√¢n n√†o trong h·ªá th·ªëng c·∫£. H√£y th·ª≠ ƒë·∫∑t s√¢n ngay h√¥m nay nh√©! ‚öΩ";
            }

            StringBuilder sb = new StringBuilder("üìÖ ƒê√¢y l√† l·ªãch s·ª≠ ƒë·∫∑t s√¢n g·∫ßn ƒë√¢y c·ªßa b·∫°n:\n\n");
            for (ThueSan t : dsThueSan) {
                sb.append(String.format(
                        "‚Ä¢ %s | Ng√†y thu√™: %s | %s - %s | T·ªïng: %s ƒë | C·ªçc: %s ƒë%s\n",
                        t.getSanBong().getTenSan(),
                        t.getNgayThue() != null ? t.getNgayThue().format(dtf) : "Kh√¥ng r√µ",
                        t.getKhungGioBatDau(),
                        t.getKhungGioKetThuc(),
                        nf.format(t.getTongTien() != null ? t.getTongTien() : 0),
                        nf.format(t.getTienCocBatBuoc() != null ? t.getTienCocBatBuoc() : 0),
                        (t.getGhiChu() != null && !t.getGhiChu().isBlank())
                                ? " | üìù Ghi ch√∫: " + t.getGhiChu()
                                : ""
                ));
            }
            sb.append("\n‚öΩ C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng v√† s·ª≠ d·ª•ng UTEScore!");
            return sb.toString().trim();
        }

        // ü§ñ 4Ô∏è‚É£ N·∫øu kh√¥ng match c√¢u h·ªèi n√†o ‚Üí g·ªçi AI Gemini
        try {
            String answer = geminiChatService.askGemini(
                    """
                    Ng∆∞·ªùi d√πng h·ªèi: "%s".
                    H√£y tr·∫£ l·ªùi b·∫±ng **ti·∫øng Vi·ªát c√≥ d·∫•u**, th√¢n thi·ªán v√† t·ª± nhi√™n nh∆∞ nh√¢n vi√™n chƒÉm s√≥c kh√°ch h√†ng c·ªßa UTEScore.
                    KH√îNG ƒë∆∞·ª£c n√≥i r·∫±ng b·∫°n l√† AI hay kh√¥ng c√≥ quy·ªÅn truy c·∫≠p d·ªØ li·ªáu.
                    N·∫øu kh√¥ng ch·∫Øc, h√£y tr·∫£ l·ªùi kh√©o l√©o, ng·∫Øn g·ªçn v√† c√≥ c·∫£m x√∫c t·ª± nhi√™n nh∆∞ ng∆∞·ªùi th·∫≠t.
                    """.formatted(msg)
            );

            if (answer != null && !answer.isBlank()) {
                return answer.trim();
            } else {
                System.err.println("‚ö†Ô∏è [Chatbot] Gemini tr·∫£ v·ªÅ ph·∫£n h·ªìi r·ªóng ho·∫∑c null.");
                return "ü§î Xin l·ªói, m√¨nh ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ di·ªÖn ƒë·∫°t l·∫°i gi√∫p m√¨nh kh√¥ng?";
            }

        } catch (Exception e) {
            System.err.println("‚ùå [Chatbot] L·ªói khi g·ªçi Gemini: " + e.getMessage());
            e.printStackTrace();
            return "‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi v·ªõi h·ªá th·ªëng AI. Vui l√≤ng th·ª≠ l·∫°i sau!";
        }
    }

    /** L·ªçc ph·∫ßn "text" t·ª´ JSON ph·∫£n h·ªìi c·ªßa Gemini (b·ªè metadata) */
    private String extractGeminiText(String json) {
        try {
            if (json == null || json.isBlank()) return null;

            JsonObject obj = JsonParser.parseString(json).getAsJsonObject();
            JsonArray candidates = obj.getAsJsonArray("candidates");
            if (candidates == null || candidates.isEmpty()) return null;

            JsonObject first = candidates.get(0).getAsJsonObject();
            JsonObject content = first.getAsJsonObject("content");
            if (content == null) return null;

            JsonArray parts = content.getAsJsonArray("parts");
            if (parts == null || parts.isEmpty()) return null;

            String text = parts.get(0).getAsJsonObject().get("text").getAsString();
            return text != null ? text.replace("\\n", "\n").trim() : null;

        } catch (Exception e) {
            System.err.println("‚ùå [Chatbot] L·ªói khi tr√≠ch JSON Gemini: " + e.getMessage());
            return null;
        }
    }
}
